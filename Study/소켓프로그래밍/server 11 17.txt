// Test_ODBC_NewVersion.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.


#include "stdafx.h"


struct socketStruct {
   int nrData;
   double data[100];
};


void ErrorHandling(char* message);

void Test_Func(SOCKET hClntSock,SOCKET hServSock,socketStruct txData, socketStruct TermData);

int _tmain(int argc, _TCHAR* argv[])
{
	int portNum = 1234;
	// 보낼 데이터를 초기화한다. 
	socketStruct txData, TermData;
	txData.nrData = 3;
	for(int i = 0; i<txData.nrData; i++)
	{
		txData.data[i] = i*10;
	}
	TermData.nrData = 0;

	WSADATA wsaData;
	SOCKET hServSock, hClntSock;
	SOCKADDR_IN servAddr, clntAddr;

	int szClntAddr;
	char message[]="Hello World!";
	
	if(WSAStartup(MAKEWORD(2, 2), &wsaData)!=0)
		ErrorHandling("WSAStartup() error!");

	hServSock=socket(PF_INET, SOCK_STREAM, 0);
	if(hServSock==INVALID_SOCKET)
		ErrorHandling("socket() error");

	memset(&servAddr, 0, sizeof(servAddr));
	servAddr.sin_family=AF_INET;
	servAddr.sin_addr.s_addr=htonl(INADDR_ANY);
	servAddr.sin_port = htons(portNum);

	if(bind(hServSock, (SOCKADDR*) &servAddr, sizeof(servAddr))==SOCKET_ERROR)
		ErrorHandling("bind() error");

	if(listen(hServSock, 5)==SOCKET_ERROR)
		ErrorHandling("listen() error");

	szClntAddr=sizeof(clntAddr);
	// 아래 함수에서 holding하고 있는다. 
	while(1)
	{
		printf("[Server] Holding at accept \n");
		hClntSock = accept(hServSock, (SOCKADDR*)&clntAddr, &szClntAddr); // 성공하면 새로운 소켓을 반환 실패하면 invalid_socket 
		//접속한 클라이언트가 없을 경우 accept()함수는 서버를 대기 상태(wait state)로 만든다.
		printf("[Server] accept !! \n");

		if(hClntSock==INVALID_SOCKET)
		{
			ErrorHandling("accept() error");
			continue;
		}
		
		Test_Func(hClntSock,hServSock,txData,TermData);

	}
	

	// 소켓 종료 
	printf("Closing Socket \n");
	closesocket(hClntSock);
	closesocket(hServSock);
	WSACleanup();
	return 0;
}

void ErrorHandling(char* message)
{
	fputs(message, stderr);
	fputc('\n', stderr);
	exit(1);
}

void Test_Func(SOCKET hClntSock,SOCKET hServSock,socketStruct txData, socketStruct TermData)
{
	int maxCnt = 2;
	while(1)
	{
		printf("maxCnt: %d \n",maxCnt);
		send(hClntSock, (char*)&txData, sizeof(txData), 0);
		Sleep(100);
		maxCnt--;
		if(maxCnt < 0)
		{
			printf("maxCnt: %d \n",maxCnt);
			break;
		}
	}
	//마지막으로 0인 데이터를 보내서 연결을 끊는다
	send(hClntSock, (char*)&TermData, sizeof(TermData), 0);
}