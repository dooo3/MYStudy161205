IOCP TIP


1장

@Overlapped IO와 IO Completion Port의 관계

IOCP 얘기를 하기 전에 Overlapped IO 에 대한 지식은 필수적입니다
IOCP는 이 Overlapped IO를 바탕으로 해서 통보를 받아 처리하는 방식 중의 하나입니다.


@Overlapped IO

@Overlapped IO란?

   넌블러킹이고, 비동기적으로 IO를 처리하기 위한 IO 방법입니다. 
	(비동기로 하는 이유 동기이면 읽기 작업이 끝날 때 까지는 함수가 리턴되지 않습니다 // 대기해야함...블러킹..suspend상태 -쓰레드가 놀게됩니다-)

@Overlapped IO의 작동
	1. 네트웍으로 패킷을 보낸다. WSASend(...,...,IpOverlapped,...) 그럼 Overlapped 구조체를 리턴함(에러처리는 무조건 해주어야함 GetLastError, WSAGetLastError 함수로 뭔 에러인지 알아보기  에러 중 @@ERROR_IO_PENDING은 IO요청이 성공했다는 정보임)
	2. 비동기적으로 IO를 요청했다는 정보가 Device Driver 날아감 (쓰레드는 다른 일 처리하러 감 -결과적으로 CPU도 놀리지 않고 훨씬 유용한 작업이 됨-)
	3. Device Driver 는 열심히 IO 하는 걸 감시하면서 처리하고 있다가 끝나면 우리한테 알려준다 여기서 IOCP등장
	

@Overlapped ? 

(말 그대로 IO가 여러 개 중첩되어서 처리된다는 얘기 )
->그림추가~Overlapped.PNG


정리
 1. Overlapped IO는 넌블러킹, 비동기 IO를 위한 방법이다.
 2. IO를 요청하고 기다릴 필요가 없이 리턴하고 딴 일을 처리한다.
 3. 나중에 이 작업 완료 여부를 체크할 수 있는데 이 방법 중에 하나가 IOCP 이다.
 4. 멀티로 IO 요청이 가능하다. 
 5. 가장 중요한 이걸 쓰는 목적! 성능을 위해서다.





2장

@Overlapped IO와 Winsock


.  WinSock 에서 Overlapped IO를 이용해서 얻는 점은 뭘까요? 이전 강좌에서도 얘기했든 카피시간을 줄이는 등 성능상의 이점이겠죠

사용방법
Overlapped IO를 소켓이 하려면 일단 이걸 쓴다는 옵션을 줘야 합니다. 이 옵션이 뭐냐 면 바로 WSA_FLAG_OVERLAPPED 라는 겁니다
. 이 옵션을 소켓 생성 시에 줌으로써 소켓이 Overlapped IO를 할 수 있도록 선언해 주는 거죠

@Send, Recv 하는 것이 중요하겠죠? 일단 Send하는 함수부터 봅시다.

Winsock 1.1 함수인 send, recv함수는 이 Overlapped IO를 지원 못합니다. 
2.2 함수를 써야 함

  int WSASend(SOCKET s,
  	     LPWSABUF lpBuffers,
              DWORD dwBufferCount,
              LPDWORD lpNumberOfBytesSent,
              DWORD dwFlags,
              LPWSAOVERLAPPED lpOverlapped,//OVERLAPPED 구조체에 대한 포인터넣기 //new OVERLAPPED or OVERLAPPED ov; 해서 &ov 하든 자유 //주의할 점은 OVERLAPPED 구조체라는것이 IO 가 끝나기전에 절대 메모리에서 사리자면 안된다는점. IO를 하면서 이 OVERLAPPED 구조체의 멤버를 계속 쓰기 때문에 없으면 런타임 에러를 발생시킴!!!!
              LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine); //Overlapped IO를 이용한 콜백 처리시 사용 ex)콜백 함수 하나 지정 그리고 Overlapped 구조체를 이용하여 IO를 하나 요청 //IO가 완료되면 이 콜백 함수를 호출해서 완료확인 //그러면 이 콜백 함수에서 처리해서 IO를 더 요청하던지 아님 소켓을 닫던지 해주기 

리턴값에 따른 에러처리
SOCKET_ERROR인지 확인하고 
	WSAGetLastError()!=ERROR_IO_PENDING 은 무시해도되는 에러//(IO 진행 중이라는 얘기,하나의 정보로 봐주면 됨)

@IOCP란
Win32에서 제공하는 커널 오브젝트 중 하나 //ex)MUTEX , ThreadKernel Object 이런 것과 비슷 하지만 그 작용이 조금 특별나다

IOCP라는 용어에서 그 의미를 찾아본다면 Port 라는 것은 어떤 것이 드나드는 것을 말함.
IO 완료, IO가 완료되면 어떤 정보 단위가 만들어 지고 이것이 port(왔다 갔다 한다는 것)
//조금 더 생각해보면 IO를 감시한다는 역할도 있을수 있다.


@IOCP가 하는일
	1.재사용 가능한 쓰레드 풀 유지
		쓰레드를 한번 쓰고 버리는게 아니라 사용하면 다시 쓰레드 모임 속으로 돌아간다		
		장점:쓰레드를 만드는데 드는 오버헤드를 없앨수있다 // 즉 서버를 시작할때 왕창 만들어 두는것
	2.CPU에 붙는 쓰레드를 조절가능
		쓰레드는 돌아가려면 반드시 CPU사용권을 가지고 있어야함 //그래서 쓰레드 들은 CPU를 서로 얻으려고 한다 //조절하는것을 스케줄러(Short Term Schduler)가 작업함//CPU를 차지하는 쓰레드 교환작업을 컨텍스트 스위칭이라고 한다//아무리 CPU가 좋아도 쓰레드가 많으면 작업시간보다 바꾸는 시간이 더 길어질수도있다! 매우 큰 문제 //그래서 서버 모델에 1user1thread가 안좋다//IOCP 는 쓰레드를 효율적으로 관리함으로써 이런 상황을 미연에 방지//즉 어떻게 하느냐면 돌아가는 쓰레드 수를 제한시켜버리는 겁//즉 최대 쓰레드 숫자를 정해버리고 그것을 지키면서 쓰레드를 처리 
@IOCP 만들기
생성하는 함수 

이 함수를 두 가지 작용을 합니다. 하나는 디바이스 오브젝트랑 IOCP 랑 연결하는 하는 작업이고 하나는 IOCP를 생성하는 작업

생성 CreateCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 쓰레드숫자);
연결 CreateCompletionPort(sock, hIocp, 컴플리션 키, 0 ); //이렇게 하면 sock 과 hIocp가 연결 //리턴값이 hIocp위치에 있는 값이 그대로 리턴

	CreateIoCompletionPort

	HANDLE CreateIoCompletionPort (
  	HANDLE FileHandle,              // handle to file
  	HANDLE ExistingCompletionPort,  // handle to I/O completion port
  	ULONG_PTR CompletionKey,        // completion key
  	DWORD NumberOfConcurrentThreads // number of threads to execute concurrently
  	);

		첫 번째 FileHandle, 			이것은 IOCP랑 연결할 Device 에 대한 핸들 //ex). File IO라면 File Obeject 이고 그리고 우리가 자주 써먹는 곳이라면 Socket 
		두 번째 ExistingCompletionPort 		는 기존에 존재한 CompletionPort 객체를 가리킵니다 //그러니까 기존의 CompletionPort 객체와 IOCP와 연결하는 작업에서 이 기존의 Completion Port Object를 가리키는 겁니다.  
		세 번째 CompletionKey 			이것은 FileHandle에 넣어준 이 핸들을 구분해주는 역할 //이거 가지고 완료되었을 때 어떤 것이 완료된 것인지를 알 수 있습니다.
		네 번째 NumberOfConcurrentThreads  	이것은 동시에 돌아갈 수 있는 쓰레드 숫자 //0으로 주면 디폴트로 CPU 숫자// 이게 쓰레드 컨텍스트 스위칭을 최소한으로 할 수 있는 숫자

	리턴값 -> IOCP Kernel Object 에 대한 핸들 값

@IOCP 프로그래밍의 기본적인 순서
	
	1.디바이스와 관련된 핸들 열기
	2.IOCP 커널 객체를 생성
	3.디바이스 핸들과 IOCP 커널 객체를 연결
	4.완료 이벤트들을 받을 쓰레드들을 만들어 쓰레드 풀을 생성
	5.쓰레드에서 IO가 완료되기만을 기다림 


3장

IOCP란

IOCP의 동작 원리

	IOCP 동작에 필요한 자료구조는 총 5가지
		1.Device List
		2.IO Completion Queue
		3.Waiting Thread Queue, Released Thread List, Paused Thread List

1.Device List
	Completion Key 와 socket 과의 연결	//어떤 디바이스가 작동을 완료했는지 알수있다 // ex) (m_sock, CK-SOCK) 이런 레코드가 있다고 가정하자	그럼"hDevice에 어떤 IO가 완료되었다."라고 상황이 발생하게 되면 CK-SOCK이라는 Completion Key가 넘어왔네?m_sock에서 작업이 완료되었나 보다!라고 생각 할 수 있다.
		--그림추가-- 3-3618에 첫번째 그림
	특징
	내용제한이 없다 ex)(m_sock,m_sock)가능
	인자가 ULONG_PTR이다.(4bytes)//포인터를 넘겨줄 수 있음! 구조체를 선언해서 포인터를 넘겨주면 구조체 안에 있는 변수들을 다 관리 할 수 있음
	정리

	생성
	CreateIoCompletionPort가 호출될 때
         (기존 IOCP 포트와 socket등의 device 객체를 연결할 때를 말합니다.)
	
	제거  
	hDevice에 지정된 핸들이 Close될 때 
         (소켓이라면 closesocket을 할 때이고 그 외라면 CloseHandle() 할 때입니다.)

2.IO Completion Queue
	이 자료구조는 IO가 완료가 되면 그 관련 정보를 저장하는 자료구조
	--그림추가--
	첫 번째 dwBytesTransferred // -0이면 소켓끊김 closesocket해주면됨
	두 번째 dwCompletionKey 
	세 번째 pOverlapped Overlapped 구조체 에 대한 포인터값
	네 번째 dwError

	관련 동작
	1.Overlapped IO 요청
	2.커널이 IOCP와 연결된 device, winsock 에서는 socket 이겠죠? 이걸 찾습니다
	3.만약에 IOCP와 연결된 것이 존재한다면, 이 완료되는 IO에 대한 정보를 모아서 위 그림과 같은 레코드를 만듭니다
	4.그리고는 그 IOCP와 관련되는 IOCP 큐, 즉 IO Completion Queue에다 집어넣습니다 //물론 FIFO니까 뒤에다 집어넣습니다. 그럼 IO가 완료된 차례대로 들어가게 될 겁니다.//그럼 우리가 이것을 하나하나 빼서 처리하는 겁니다. 전에 말했던 콜백함수에서
	
	ex) 
		sock이라는 소켓에 recv작업이 완료되었다.(10bytes recv되었다고 가정,에러는 없었다,sock과 관련된 Completion Key는 sock이라 하자)
		
		(10,sock,pOverlapped,0);
		
		이런 레코드가 하나 만들어짐 그리고 이 레코드 내용이 IOCP 큐로 들어간다

		보자 10바이트가 전송되었네? 그리고 sock 라는 소켓에 요청한 recv 작업이 그렇게 된 거고, 에러는 없네. 라고 해석이 가능함]
		
		그럼 중요한 데이터는 어떻게 알아내나? // Overlapped 구조체에서 확인!!
	@@@@@
	OVERLAPPED 구초제의 확장
		
	ex)
	
	struct PerIoOperationData
  	{
     		OVERLAPPED ov;
     		WSABUF buf;
		char buffer[4096];     
  	};
	
	c++
	struct PerIoOperationData: public OVERLAPPED
	{     
     		WSABUF buf;
		char buffer[4096];     
  	};
	
	여기 있는 버퍼를 WSARecv나 WSASend할 때 지정해 주는것 // . 만약 recv 동작이고 IO 완료 레코드가 IOCP 큐에 들어가 있는 상황이라면, 이미 여기에 외부에서 온 데이터들이 저장되어 있는 것
		
	@@@@@PostQueuedCompletionStatus?

	IOCP 큐가 있는데 여기에 우리가 내용을 직접 넣을 수는 없을까? 이때 사용할수 있는게 PostQueuedCompletionStatus 이다.

	BOOL PostQueuedCompletionStatus (
  			HANDLE CompletionPort,            // handle to an I/O completion port
  			DWORD dwNumberOfBytesTransferred, // bytes transferred
  			ULONG_PTR dwCompletionKey,        // completion key 
  			LPOVERLAPPED lpOverlapped         // overlapped buffer
			);
	
	PostQueuedCompletionStatus 활용 예제)
		1.Completion Key 부분에 보낼 내용을 집어넣고 반대쪽의 처리 쓰레드에서 이 Completion Key의 내용만을 처리한다면 훌륭한 쓰레드간의 큐가 될 수 있을 겁니다. 
	
		2.IOCP Worker Thread의 종료 처리에 사용/// 서버 종료 시에 이 API로 어떤 특정한 Completion Key를 보낸다면 이것을 읽은 Thread 는 리턴 하여 쓰레드를 종료하게 만들어 버리는 겁니다
				
	정리

	생성: IO 요청이 완료되었을 때  
         PostQueuedCompletionStatus를 호출하였을 때
	제거: Waiting Thread Queue로부터 Entry를 하나 제거할 때
	
		

3.Waiting Thread Queue, Released Thread List, Paused Thread List
	
	이 세 개는 Concurrent Thread 숫자와 관계가 있습니다.
	--그림추가--
	
	레코드 내용은 아주 간단 //. dwThreadID 즉 IOCP Worker Thread의 Thread ID 군요. 즉 아 아이디로만 모든 쓰레드를 관리

	
	
	1)Waiting Thread Queue
	PostQueuedCompletionStatus 함수는 큐에다 어떤 레코드를 집어넣어 주는 거라고 말씀 드렸습니다. 그럼 GetQueuedCompletionStatus 함수는 반대로 큐에서 빼는 거라고 
	
	BOOL GetQueuedCompletionStatus(
  		HANDLE CompletionPort,       // handle to completion port
  		LPDWORD lpNumberOfBytes,     // bytes transferred
  		PULONG_PTR lpCompletionKey,  // file completion key
  		LPOVERLAPPED *lpOverlapped,  // buffer
  		DWORD dwMilliseconds         // optional timeout value
		);

	리턴값 찾아보기 MSDN참고하기 (중요한 함수) 2,3,4번째가 포인터로 되어있음(Out Parameter이기 때문에??)
	
	이것이 쓰레드에서 불릴 때 Waiting Thread Queue(WTQ) 에 들어가는 겁니다. 즉 GQCS함수가 쓰레드에서 불린다면 이 쓰레드는 쓰레드 풀로 들어간다고 얘기할 수 있게 되는 겁니다
	--그림참조--
	
	그래서 이 GQCS 함수가 쓰레드에서 불린다면 INFINITE 옵션 시에 블로킹이 됩니다.그리고는 쓰레드 풀에 들어감.	
	그래서 IO가 요청되어서 완료되고 IOCQ에 레코드 들어가면 IOCP가 이를 알아채어서 쓰레드 중 하나를 깨웁니다.
	그리고는 GQCS함수를 리턴 (리턴 할 때는 레코드를 하나 빼서 돌아옴.그리고는 처리하고 다시 GQCS를 부릅니다. 그럼 또 블록킹이 됨.
	
	결과 : IO가 완료되기를 기다리는 대부분의 시간 동안 쓰레드가 suspend되어서 CPU도 안 잡아먹음(쓰레드 풀 완성)

	정리

	WTQ로 들어올 때:1. 쓰레드함수가 GetQueuedCompletionStatus()를 불렀을 때 
                  	   (즉 IOCP 서버 시작 시에 쓰레드를 만들어 놓을 때에 이 함수가 불리죠?
                  	   이 함수가 불림으로써 쓰레드 풀이 만들어집니다.)
			2. GetQueuedCompletionStatus 함수가 리턴 되어 IO 완료 레코드를
                           처리한 후에 다시 GetQueuedCompletionStatus함수를 불렀을 때 
	
	WTQ에서 나갈 때:	IO Completion Queue가 비어있지 않고(And) Release Thread List에 있는 쓰레드 수가 지정해준 Concurrent Thread 수를 넘지 않았을 때
	
	중요!!!
	Waiting Thread Queue가 LIFO 구조를 가지는 이유!!
	
		쓰레드가 Stack으로 쌓여 있다고 봅시다. 그럼 쓰레드가 하나 필요하다면 Stack이니까 가장 위에 있던 쓰레드(실제로는 dwThreadID만 거기에 있겠죠?)가 나갈 겁니다. 그리고는 쓰고 나서는 다시 돌아오면 또 가장 위에 쌓이게 됩니다. 그럼 이런 작업이 여러 번 반복되다 보면 항상 쓰던 쓰레드만 쓰일 겁니다. 그렇죠? 가장 위에 있는 것부터 쓰고 또 가장 위로 다시 들어오니까요. 그림으로 그려보시면 가장 쉽게 파악이 되실 겁니다.
	--그림추가--
	장점
	이러면 쓰레드 풀에 아무리 많은 쓰레드 들이 있다고 해도 실제로 메모리 차지하는 건 자주 쓰이는 위에 몇 개의 메모리 뿐이지요
	그래서 대비로 쓰레드 풀에 여러 개를 많이 넣어 놨다고 해서 그게 성능에 영향을 미치지 않는다는 말입니다 
	--그림추가--
	
	2)Released Thread List

	정리
	
	추가(생성) : 1) IOCP가 WTQ에서 쓰레드를 깨울 때 (쓰레드 깨우면 그건 곧 돌아가는 쓰레드가 되니까 여기에다 그 쓰레드의 아이디를 추가하는 겁니다.)
		     2) Paused Thread가 깨어날 때
	
	제거 	   : 1)쓰레드가 다시 GetQueuedCompletionStatus 함수를 부를 때 
		     2)쓰레드가 스스로 Suspend 될 때 (sleep, waitForSingleObject or 블록이 되는 함수?를 부른상황)

	3)Paused Thread List
	정지된 thread (어떤 이벤트로 인해서 suspend되는 상황! 위에말한것들)

	정리

	추가(생성) : Released Thread가 멈출때(스스로 Suspend될때)
	
	제거	   : Suspend된 쓰레드가 깨어날 때
		     어떤 이벤트가 완료되거나 하여서 쓰레드 스스로가 깨어나는것 (그러면 dwThreadID는 RTL(Released Thread List로 옮겨감)
	//RTL PTL 정리 완료

	WTQ-RTL-PTL그림 정리
	--그림첨부--

	

	@@@@@@@@@@@@@IOCP의 최종목적@@@@@@@@@@@@@
	즉 IOCP의 최종 목적은 오버헤드는 최소한으로 줄이면서 CPU는 돌릴 수 있다면 최대한으로 놀리지 않고 돌리게 하는 겁니다. 그럼 성능은 최상이 되겠죠?

4장

IOCP 예제~ (서버/클라이언트)


	
그럼 Init() 란 함수가 끝났습니다. 실질적으로 IOCP 서버에서 초기화 과정이 이 함수에서 처리되는 겁니다. 위에는 코드가 생략되어 있지만 리슨 소켓 생성하고 bind 시키고 그리고 listen 모드로 해놓고, 그리고 IOCP 객체를 생성하고 쓰레드 풀을 만드는 과정까지가 IOCP서버가 초기에 하는 일이 되겠습니다.
	
accept시에 해야 될 일
	1. 그럼 클라이언트가 올 때까지 대기하다가 접속해오면 클라이언트에 대한 소켓을 리턴
	2. setsockopt 함수로 소켓 옵션을 조절 ( 보통은 이 소켓을 인자로 넘기는 쓰레드를 만들거나 할 터인데, 여기서는 약간의 옵션을 처리합니다. 
	3. 소켓 컨텍스트 할당

	ex)
	typedef struct tagPerIoContext
	{
		WSAOVERLAPPED overlapped;
		WSABUF wsaBuf;
		char Buffer[MAX_BUFFER];
	} PerIoContext, *PPerIoContext;

	typedef struct tagPerSocketContext
	{
  		SOCKET socket;
  		PPerIoContext recvContext;
  		PPerIoContext sendContext;

	} PerSocketContext, *PPerSocketContext

	4.IOCP 에서는 Completion Key와 socket 또는 device를 연결해야함 

	5.초기 Recv걸기(중요)[초기 IO 요청]	(WSARecv함수를 따로 빼서 클래스에서 정의 tip, 간단하게 BOOL NetworkController::RecvPost(PPerSocketContext pPerSocketCtx) 이런 느낌으로 제작)

	주의
	Overlapped IO 라는 것을 한마디로 축약하자면 선 요청 후 결과처리 이기때문에 미리 recv를 socket에 걸어줘야만 리시브가 된다!!.접속만 되고 내용은 안 받는게 이것 때문이다
	물론 send를 먼저 걸어도 된다// 어떤 경우든 간에 send,recv 든 IO를 하나 초기에 걸어야 나머지 처리가 된다.
	

	가장 중요한
	3.Worker Thread 처리
	
	완료된 IO 결과를 뽑아내고 그 내용을 분석하여서 그 분석된 결과에 따라 Send 면 Send, Recv면 Recv완료 처리하는것

	참고 일반적인 상황에서 처리를 보면 recv 완료 후에 처리는 패킷(요 패킷은 데이터를 주고 받는 그 패킷입니다.) 받을 것을 보고 덜 받았다. 그럼 다시 recv를 요청합니다. 그리고 만약 다 받은 것 같다. 그럼 그 패킷에 따라 다른 작업을 하는 것입니다. 그리고 send 완료는 이번 완료된 send 는 제대로 다 간 것인가? 라는 것을 체크하고 아니라면 더 요청하는 식으로 합니다.이렇게 IO 하나 처리에 따라 정보가 다 받아졌는지 덜 받아졌는지 체크를 해서 그에 따라 처리하는 루틴이 이 쪽 Worker Thread 쪽에서 할 일이 되겠습니다.

	


 
			